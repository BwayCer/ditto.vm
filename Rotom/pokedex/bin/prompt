#!/bin/bash
# 選項提示


# ./optionPrompt.sh 請選擇 [Yes|yes|Y|y|*]:確定 [No|no|N|n]:取消
# 請選擇 ( Yes: 確定 ; No: 取消 ) :
# 請選擇 ( Yes: confirm ; No: cancel ) :


__dirname=`dirname $0`


fnMain() {
    local recordFile="$__dirname/.prompt.tmp"

    if [ "$1" == "rtnAnswer" ]; then
        if [ -f "$recordFile" ]; then
            cat "$recordFile"
            rm "$recordFile"
        fi
    else
        if [ -f "$recordFile" ]; then rm "$recordFile"; fi
        fnPrompt "$@"
        echo "$rtnPrompt" > "$recordFile"
    fi
}


rtnPrompt=""
fnPrompt() {
    local txtQuestion="$1"; shift

    local tmpOpt
    local option optionName describe
    local regexCompleteOption="\($fnPrompt_regexAllowOption\)\(:\(.*\)\)\?"
    local defaultOption=""
    local txtList=""
    local txtDescribe=""

    for tmpOpt in "$@"
    do
        if [ -z "`echo "$tmpOpt" | grep "$regexCompleteOption"`" ]; then continue; fi

        option="`    echo "$tmpOpt" | sed "s/$regexCompleteOption/\1/"`"
        optionName="`echo "$tmpOpt" | sed "s/$regexCompleteOption/\2/"`"
        describe="`  echo "$tmpOpt" | sed "s/$regexCompleteOption/\6/"`"

        if [ -n "$describe" ]; then
            describe=": $describe"
        fi

        if [ -n "`echo "$option" | grep "\*"`" ]; then
            defaultOption="$optionName"
            fnPrompt_fnDefaultString "${optionName}${describe} ;"
            txtDescribe="$txtDescribe $rtnDefaultString"
        else
            txtDescribe="$txtDescribe ${optionName}${describe} ;"
        fi

        txtList="$txtList$option"
    done

    if [ -n "$txtList" ]; then
        fnobjParseOption_defaultOption="$defaultOption"
        fnobjParseOption_optList="$txtList"
        fnobjParseOption_optDescribe=" ($txtDescribe )"
    else
        fnobjParseOption_defaultOption=""
        fnobjParseOption_optList=""
        fnobjParseOption_optDescribe=""
    fi

    fnPrompt_fnAsk "$txtQuestion" \
        "$fnobjParseOption_defaultOption" \
        "$fnobjParseOption_optList" \
        "$fnobjParseOption_optDescribe"
}
fnPrompt_regexAllowOption="\[\([A-Za-z0-9]*\)\(|[A-Za-z0-9]*\)*\(|\*\)\?\]"
fnPrompt_rtnDefaultString=""
fnPrompt_fnDefaultString() {
    local defaultString="$1"

    rtnDefaultString="\e[01;32m${defaultString}\e[00m"
}
fnPrompt_rtnAsk=""
fnPrompt_fnAsk() {
    local txtQuestion="$1"
    local defaultOption="$2"
    local optList="$3"
    local optDescribe="$4"

    local tmpCho regexChoose

    printf "${txtQuestion}${optDescribe} : "
    read tmpCho

    regexChoose=".*\(\[\(\|[A-Za-z0-9|]*|\)$tmpCho\(|[A-Za-z0-9|]*\|\)\(|\*\)\?\]\).*"

    if [ -z "$tmpCho" ] && [ -z "$defaultOption" ]; then
        fnPrompt_fnAsk "$txtQuestion" "$defaultOption" "$optList" "$optDescribe"
    elif [ -z "$tmpCho" ]; then
        rtnPrompt="$defaultOption"
    elif [ "$tmpCho" == "*" ]; then
        fnPrompt_fnAsk "$txtQuestion" "$defaultOption" "$optList" "$optDescribe"
    elif [ -n "`echo "$optList" | grep "$regexChoose"`" ]; then
        rtnPrompt="`echo "$optList" | sed "s/$regexChoose/\1/" | sed "s/$fnPrompt_regexAllowOption/\1/"`"
    else
        fnPrompt_fnAsk "$txtQuestion" "$defaultOption" "$optList" "$optDescribe"
    fi
}


fnMain "$@"

